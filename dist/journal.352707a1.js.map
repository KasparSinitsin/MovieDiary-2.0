{"mappings":"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","sources":["<anon>","src/js/journal.js"],"sourcesContent":["const API_KEY = \"f227f8570d7e9f8fe4165d6e947bd24a\";\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nlet genres = {};\n// Fetch movie genres from TMDB API\nconst fetchGenres = async ()=>{\n    try {\n        const response = await fetch(`${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n        if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n        const data = await response.json();\n        genres = data.genres.reduce((acc, genre)=>{\n            acc[genre.id] = genre.name;\n            return acc;\n        }, {});\n    } catch (error) {\n        console.error(\"Error fetching genres:\", error);\n        showToast(\"Failed to fetch genres. Please try again.\", \"error\");\n    }\n};\nconst journalMoviesContainer = document.querySelector(\"#journal-movies-container\");\nconst tagSearchBar = document.querySelector(\"#tag-search-bar\");\nconst tagSearchBtn = document.querySelector(\"#tag-search-btn\");\n// Fetch favorite movies from local storage\nconst fetchJournalMovies = ()=>{\n    return JSON.parse(localStorage.getItem(\"journal\")) || [];\n};\n// Save updated journal to local storage\nconst saveJournalMovies = (movies)=>{\n    localStorage.setItem(\"journal\", JSON.stringify(movies));\n};\n// Render movies in the journal\nconst renderJournalMovies = (movies)=>{\n    journalMoviesContainer.innerHTML = \"\"; // Clear previous content\n    if (movies.length === 0) {\n        journalMoviesContainer.innerHTML = '<p class=\"text-center text-gray-400\">No movies in your journal.</p>';\n        return;\n    }\n    movies.forEach((movie)=>{\n        const card = document.createElement(\"div\");\n        card.className = \"bg-gray-900 p-4 rounded-md shadow-md hover:shadow-lg\";\n        const img = document.createElement(\"img\");\n        img.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n        img.alt = movie.title;\n        img.className = \"w-full h-72 object-cover rounded-md mb-4\";\n        const title = document.createElement(\"h2\");\n        title.textContent = movie.title;\n        title.className = \"text-xl font-bold mb-2\";\n        const genreList = movie.genre_ids.map((id)=>genres[id]).filter(Boolean).join(\", \");\n        const genresText = document.createElement(\"p\");\n        genresText.textContent = `Genres: ${genreList || \"N/A\"}`;\n        genresText.className = \"text-gray-400 text-sm\";\n        const releaseDate = document.createElement(\"p\");\n        releaseDate.textContent = `Release Date: ${movie.release_date}`;\n        releaseDate.className = \"text-gray-400 text-sm\";\n        const tags = document.createElement(\"p\");\n        tags.textContent = `Tags: ${movie.tags.join(\", \") || \"None\"}`;\n        tags.className = \"text-gray-400 text-sm\";\n        const watchedDate = document.createElement(\"p\");\n        watchedDate.textContent = `Watched: ${movie.watchedDate || \"Not set\"}`;\n        watchedDate.className = \"text-gray-400 text-sm\";\n        const tagInput = document.createElement(\"input\");\n        tagInput.type = \"text\";\n        tagInput.placeholder = \"Add tags (comma separated)\";\n        tagInput.className = \"w-full p-2 rounded-md bg-gray-800 text-white mb-2\";\n        const dateInput = document.createElement(\"input\");\n        dateInput.type = \"date\";\n        dateInput.className = \"w-full p-2 rounded-md bg-gray-800 text-white mb-2\";\n        const updateBtn = document.createElement(\"button\");\n        updateBtn.textContent = \"Update\";\n        updateBtn.className = \"hover:bg-[#f99339] bg-transparent border-2 border-[#f99339] text-white px-4 py-2 rounded-md mb-2\";\n        updateBtn.addEventListener(\"click\", ()=>{\n            const updatedTags = tagInput.value.split(\",\").map((tag)=>tag.trim()).filter((tag)=>tag);\n            const updatedDate = dateInput.value;\n            const journal = fetchJournalMovies();\n            const updatedJournal = journal.map((m)=>m.id === movie.id ? {\n                    ...m,\n                    tags: updatedTags.length ? updatedTags : m.tags,\n                    watchedDate: updatedDate || m.watchedDate\n                } : m);\n            saveJournalMovies(updatedJournal);\n            renderJournalMovies(updatedJournal);\n        });\n        const removeBtn = document.createElement(\"button\");\n        removeBtn.innerHTML = '<i class=\"fas fa-trash\"></i>';\n        removeBtn.className = \"bg-transparent text-[#f99339] hover:text-white text-2xl mt-2 float-right rounded-md\";\n        removeBtn.addEventListener(\"click\", ()=>{\n            const journal = fetchJournalMovies();\n            const updatedJournal = journal.filter((m)=>m.id !== movie.id);\n            saveJournalMovies(updatedJournal);\n            renderJournalMovies(updatedJournal);\n        });\n        card.appendChild(img);\n        card.appendChild(title);\n        card.appendChild(genresText);\n        card.appendChild(releaseDate);\n        card.appendChild(tags);\n        card.appendChild(watchedDate);\n        card.appendChild(tagInput);\n        card.appendChild(dateInput);\n        card.appendChild(updateBtn);\n        card.appendChild(removeBtn);\n        journalMoviesContainer.appendChild(card);\n    });\n};\n// Handle tag search functionality\nconst handleTagSearch = ()=>{\n    const query = tagSearchBar.value.trim().toLowerCase();\n    if (!query) {\n        renderJournalMovies(fetchJournalMovies());\n        return;\n    }\n    const filteredMovies = fetchJournalMovies().filter((movie)=>movie.tags.some((tag)=>tag.toLowerCase().includes(query)));\n    renderJournalMovies(filteredMovies);\n};\n// Initialize journal page\nconst initializeJournalPage = async ()=>{\n    await fetchGenres(); // Fetch genres first\n    renderJournalMovies(fetchJournalMovies());\n};\n// Event listener for tag search button\ntagSearchBtn.addEventListener(\"click\", handleTagSearch);\n// Initialize the page on load\ninitializeJournalPage();\n\n//# sourceMappingURL=journal.352707a1.js.map\n","const API_KEY = \"f227f8570d7e9f8fe4165d6e947bd24a\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\nlet genres = {};\r\n\r\n// Fetch movie genres from TMDB API\r\nconst fetchGenres = async () => {\r\n  try {\r\n    const response = await fetch(\r\n      `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`\r\n    );\r\n    if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\r\n    const data = await response.json();\r\n    genres = data.genres.reduce((acc, genre) => {\r\n      acc[genre.id] = genre.name;\r\n      return acc;\r\n    }, {});\r\n  } catch (error) {\r\n    console.error(\"Error fetching genres:\", error);\r\n    showToast(\"Failed to fetch genres. Please try again.\", \"error\");\r\n  }\r\n};\r\n\r\nconst journalMoviesContainer = document.querySelector(\r\n  \"#journal-movies-container\"\r\n);\r\nconst tagSearchBar = document.querySelector(\"#tag-search-bar\");\r\nconst tagSearchBtn = document.querySelector(\"#tag-search-btn\");\r\n\r\n// Fetch favorite movies from local storage\r\nconst fetchJournalMovies = () => {\r\n  return JSON.parse(localStorage.getItem(\"journal\")) || [];\r\n};\r\n\r\n// Save updated journal to local storage\r\nconst saveJournalMovies = (movies) => {\r\n  localStorage.setItem(\"journal\", JSON.stringify(movies));\r\n};\r\n\r\n// Render movies in the journal\r\nconst renderJournalMovies = (movies) => {\r\n  journalMoviesContainer.innerHTML = \"\"; // Clear previous content\r\n  if (movies.length === 0) {\r\n    journalMoviesContainer.innerHTML =\r\n      '<p class=\"text-center text-gray-400\">No movies in your journal.</p>';\r\n    return;\r\n  }\r\n\r\n  movies.forEach((movie) => {\r\n    const card = document.createElement(\"div\");\r\n    card.className = \"bg-gray-900 p-4 rounded-md shadow-md hover:shadow-lg\";\r\n\r\n    const img = document.createElement(\"img\");\r\n    img.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\r\n    img.alt = movie.title;\r\n    img.className = \"w-full h-72 object-cover rounded-md mb-4\";\r\n\r\n    const title = document.createElement(\"h2\");\r\n    title.textContent = movie.title;\r\n    title.className = \"text-xl font-bold mb-2\";\r\n\r\n    const genreList = movie.genre_ids\r\n      .map((id) => genres[id])\r\n      .filter(Boolean)\r\n      .join(\", \");\r\n    const genresText = document.createElement(\"p\");\r\n    genresText.textContent = `Genres: ${genreList || \"N/A\"}`;\r\n    genresText.className = \"text-gray-400 text-sm\";\r\n\r\n    const releaseDate = document.createElement(\"p\");\r\n    releaseDate.textContent = `Release Date: ${movie.release_date}`;\r\n    releaseDate.className = \"text-gray-400 text-sm\";\r\n\r\n    const tags = document.createElement(\"p\");\r\n    tags.textContent = `Tags: ${movie.tags.join(\", \") || \"None\"}`;\r\n    tags.className = \"text-gray-400 text-sm\";\r\n\r\n    const watchedDate = document.createElement(\"p\");\r\n    watchedDate.textContent = `Watched: ${movie.watchedDate || \"Not set\"}`;\r\n    watchedDate.className = \"text-gray-400 text-sm\";\r\n\r\n    const tagInput = document.createElement(\"input\");\r\n    tagInput.type = \"text\";\r\n    tagInput.placeholder = \"Add tags (comma separated)\";\r\n    tagInput.className = \"w-full p-2 rounded-md bg-gray-800 text-white mb-2\";\r\n\r\n    const dateInput = document.createElement(\"input\");\r\n    dateInput.type = \"date\";\r\n    dateInput.className = \"w-full p-2 rounded-md bg-gray-800 text-white mb-2\";\r\n\r\n    const updateBtn = document.createElement(\"button\");\r\n    updateBtn.textContent = \"Update\";\r\n    updateBtn.className =\r\n      \"hover:bg-[#f99339] bg-transparent border-2 border-[#f99339] text-white px-4 py-2 rounded-md mb-2\";\r\n\r\n    updateBtn.addEventListener(\"click\", () => {\r\n      const updatedTags = tagInput.value\r\n        .split(\",\")\r\n        .map((tag) => tag.trim())\r\n        .filter((tag) => tag);\r\n      const updatedDate = dateInput.value;\r\n\r\n      const journal = fetchJournalMovies();\r\n      const updatedJournal = journal.map((m) =>\r\n        m.id === movie.id\r\n          ? {\r\n              ...m,\r\n              tags: updatedTags.length ? updatedTags : m.tags,\r\n              watchedDate: updatedDate || m.watchedDate,\r\n            }\r\n          : m\r\n      );\r\n\r\n      saveJournalMovies(updatedJournal);\r\n      renderJournalMovies(updatedJournal);\r\n    });\r\n\r\n    const removeBtn = document.createElement(\"button\");\r\n    removeBtn.innerHTML = '<i class=\"fas fa-trash\"></i>';\r\n    removeBtn.className =\r\n      \"bg-transparent text-[#f99339] hover:text-white text-2xl mt-2 float-right rounded-md\";\r\n\r\n    removeBtn.addEventListener(\"click\", () => {\r\n      const journal = fetchJournalMovies();\r\n      const updatedJournal = journal.filter((m) => m.id !== movie.id);\r\n\r\n      saveJournalMovies(updatedJournal);\r\n      renderJournalMovies(updatedJournal);\r\n    });\r\n\r\n    card.appendChild(img);\r\n    card.appendChild(title);\r\n    card.appendChild(genresText);\r\n    card.appendChild(releaseDate);\r\n    card.appendChild(tags);\r\n    card.appendChild(watchedDate);\r\n    card.appendChild(tagInput);\r\n    card.appendChild(dateInput);\r\n    card.appendChild(updateBtn);\r\n    card.appendChild(removeBtn);\r\n\r\n    journalMoviesContainer.appendChild(card);\r\n  });\r\n};\r\n\r\n// Handle tag search functionality\r\nconst handleTagSearch = () => {\r\n  const query = tagSearchBar.value.trim().toLowerCase();\r\n  if (!query) {\r\n    renderJournalMovies(fetchJournalMovies());\r\n    return;\r\n  }\r\n\r\n  const filteredMovies = fetchJournalMovies().filter((movie) =>\r\n    movie.tags.some((tag) => tag.toLowerCase().includes(query))\r\n  );\r\n\r\n  renderJournalMovies(filteredMovies);\r\n};\r\n\r\n// Initialize journal page\r\nconst initializeJournalPage = async () => {\r\n  await fetchGenres(); // Fetch genres first\r\n  renderJournalMovies(fetchJournalMovies());\r\n};\r\n\r\n// Event listener for tag search button\r\ntagSearchBtn.addEventListener(\"click\", handleTagSearch);\r\n\r\n// Initialize the page on load\r\ninitializeJournalPage();\r\n"],"names":["genres","fetchGenres","response","fetch","ok","Error","status","data","json","reduce","acc","genre","id","name","error","console","showToast","journalMoviesContainer","document","querySelector","tagSearchBar","tagSearchBtn","fetchJournalMovies","JSON","parse","localStorage","getItem","saveJournalMovies","movies","setItem","stringify","renderJournalMovies","innerHTML","length","forEach","movie","card","createElement","className","img","src","poster_path","alt","title","textContent","genreList","genre_ids","map","filter","Boolean","join","genresText","releaseDate","release_date","tags","watchedDate","tagInput","type","placeholder","dateInput","updateBtn","addEventListener","updatedTags","value","split","tag","trim","updatedDate","updatedJournal","journal","m","removeBtn","appendChild","initializeJournalPage","query","toLowerCase","some","includes"],"version":3,"file":"journal.352707a1.js.map"}