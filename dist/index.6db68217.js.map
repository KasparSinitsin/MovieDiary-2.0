{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["var $54b47fc030b7b21e$exports = {};\nconst $54b47fc030b7b21e$var$API_KEY = \"f227f8570d7e9f8fe4165d6e947bd24a\";\nconst $54b47fc030b7b21e$var$BASE_URL = \"https://api.themoviedb.org/3\";\nconst $54b47fc030b7b21e$var$moviesContainer = document.querySelector(\"#movies-container\");\nconst $54b47fc030b7b21e$var$searchBar = document.querySelector(\"#search-bar\");\nconst $54b47fc030b7b21e$var$searchBtn = document.querySelector(\"#search-btn\");\nlet $54b47fc030b7b21e$var$genres = {};\n// Fetch movie genres from TMDB API\nconst $54b47fc030b7b21e$var$fetchGenres = async ()=>{\n    try {\n        const response = await fetch(`${$54b47fc030b7b21e$var$BASE_URL}/genre/movie/list?api_key=${$54b47fc030b7b21e$var$API_KEY}&language=en-US`);\n        if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n        const data = await response.json();\n        $54b47fc030b7b21e$var$genres = data.genres.reduce((acc, genre)=>{\n            acc[genre.id] = genre.name;\n            return acc;\n        }, {});\n    } catch (error) {\n        console.error(\"Error fetching genres:\", error);\n        $54b47fc030b7b21e$var$showToast(\"Failed to fetch genres. Please try again.\", \"error\");\n    }\n};\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Simulate a page load time\n    setTimeout(()=>{\n        const loader = document.getElementById(\"page-loader\");\n        if (loader) loader.style.display = \"none\";\n    }, 2000); // Adjust the timeout as needed\n});\n// Fetch popular movies from TMDB API\nconst $54b47fc030b7b21e$var$fetchMovies = async (query = \"\")=>{\n    try {\n        const url = query ? `${$54b47fc030b7b21e$var$BASE_URL}/search/movie?api_key=${$54b47fc030b7b21e$var$API_KEY}&query=${query}&language=en-US` : `${$54b47fc030b7b21e$var$BASE_URL}/movie/popular?api_key=${$54b47fc030b7b21e$var$API_KEY}&language=en-US`;\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\n        const data = await response.json();\n        return data.results;\n    } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n        $54b47fc030b7b21e$var$showToast(\"Failed to fetch movies. Please try again.\", \"error\");\n        return [];\n    }\n};\n// Render movies as cards\nconst $54b47fc030b7b21e$var$renderMovies = (movies)=>{\n    $54b47fc030b7b21e$var$moviesContainer.innerHTML = \"\"; // Clear previous content\n    if (movies.length === 0) {\n        $54b47fc030b7b21e$var$moviesContainer.innerHTML = '<p class=\"text-center text-gray-400\">No movies found.</p>';\n        return;\n    }\n    const journal = JSON.parse(localStorage.getItem(\"journal\")) || [];\n    movies.forEach((movie)=>{\n        const card = document.createElement(\"div\");\n        card.className = \"bg-gray-900 p-4 rounded-md shadow-md hover:shadow-lg\";\n        const img = document.createElement(\"img\");\n        img.src = movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : \"https://via.placeholder.com/500x750?text=No+Image\";\n        img.alt = movie.title;\n        img.className = \"w-full h-72 object-cover rounded-md mb-4\";\n        const title = document.createElement(\"h2\");\n        title.textContent = movie.title;\n        title.className = \"text-xl font-bold mb-2\";\n        const genreList = movie.genre_ids.map((id)=>$54b47fc030b7b21e$var$genres[id]).filter(Boolean).join(\", \");\n        const genresText = document.createElement(\"p\");\n        genresText.textContent = `Genres: ${genreList || \"N/A\"}`;\n        genresText.className = \"text-gray-400 text-sm\";\n        const releaseDate = document.createElement(\"p\");\n        releaseDate.textContent = `Release Date: ${movie.release_date}`;\n        releaseDate.className = \"text-gray-400 text-sm\";\n        const addToJournalBtn = document.createElement(\"button\");\n        const isFavorite = journal.some((entry)=>entry.id === movie.id);\n        addToJournalBtn.innerHTML = isFavorite ? '<i class=\"fas fa-heart\"></i>' : '<i class=\"far fa-heart\"></i>'; // Check if movie is in journal\n        addToJournalBtn.className = \"bg-transparent text-[#f99339] hover:text-white text-2xl mt-4 float-right\";\n        addToJournalBtn.addEventListener(\"click\", ()=>{\n            $54b47fc030b7b21e$var$toggleFavorite(movie, addToJournalBtn); // Add toggle functionality\n        });\n        card.appendChild(img);\n        card.appendChild(title);\n        card.appendChild(genresText);\n        card.appendChild(releaseDate);\n        card.appendChild(addToJournalBtn);\n        $54b47fc030b7b21e$var$moviesContainer.appendChild(card);\n    });\n};\n// Toggle favorite function (add/remove)\nconst $54b47fc030b7b21e$var$toggleFavorite = (movie, button)=>{\n    const journal = JSON.parse(localStorage.getItem(\"journal\")) || [];\n    const movieExists = journal.find((entry)=>entry.id === movie.id);\n    if (!movieExists) {\n        movie.tags = [];\n        movie.watchedDate = null;\n        journal.push(movie);\n        localStorage.setItem(\"journal\", JSON.stringify(journal));\n        button.innerHTML = '<i class=\"fas fa-heart\"></i>';\n        $54b47fc030b7b21e$var$showToast(`${movie.title} has been added to your favorites!`, \"success\");\n    } else {\n        const updatedJournal = journal.filter((entry)=>entry.id !== movie.id);\n        localStorage.setItem(\"journal\", JSON.stringify(updatedJournal));\n        button.innerHTML = '<i class=\"far fa-heart\"></i>';\n        $54b47fc030b7b21e$var$showToast(`${movie.title} has been removed from your favorites.`, \"info\");\n    }\n};\n// Initialize homepage with popular movies\nconst $54b47fc030b7b21e$var$initializeHomePage = async ()=>{\n    await $54b47fc030b7b21e$var$fetchGenres(); // Fetch genres first\n    const popularMovies = await $54b47fc030b7b21e$var$fetchMovies();\n    $54b47fc030b7b21e$var$renderMovies(popularMovies);\n};\n// Search functionality\nconst $54b47fc030b7b21e$var$handleSearch = async ()=>{\n    const query = $54b47fc030b7b21e$var$searchBar.value.trim();\n    if (query) {\n        const searchedMovies = await $54b47fc030b7b21e$var$fetchMovies(query);\n        $54b47fc030b7b21e$var$renderMovies(searchedMovies);\n    }\n};\n// Utility function to display toast messages\nconst $54b47fc030b7b21e$var$showToast = (message, type)=>{\n    Toastify({\n        text: message,\n        duration: 3000,\n        gravity: \"top\",\n        position: \"right\",\n        stopOnFocus: true,\n        style: {\n            background: type === \"success\" ? \"#28a745\" : type === \"error\" ? \"#dc3545\" : type === \"info\" ? \"#17a2b8\" : \"#ffc107\",\n            color: \"white\",\n            borderRadius: \"8px\",\n            padding: \"8px 16px\"\n        }\n    }).showToast();\n};\n// Event listener for search button\n$54b47fc030b7b21e$var$searchBtn.addEventListener(\"click\", $54b47fc030b7b21e$var$handleSearch);\n// Initialize the page on load\n$54b47fc030b7b21e$var$initializeHomePage();\n\n\n//# sourceMappingURL=index.6db68217.js.map\n","const API_KEY = \"f227f8570d7e9f8fe4165d6e947bd24a\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst moviesContainer = document.querySelector(\"#movies-container\");\r\nconst searchBar = document.querySelector(\"#search-bar\");\r\nconst searchBtn = document.querySelector(\"#search-btn\");\r\nlet genres = {};\r\n\r\n// Fetch movie genres from TMDB API\r\nconst fetchGenres = async () => {\r\n  try {\r\n    const response = await fetch(\r\n      `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`\r\n    );\r\n    if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\r\n    const data = await response.json();\r\n    genres = data.genres.reduce((acc, genre) => {\r\n      acc[genre.id] = genre.name;\r\n      return acc;\r\n    }, {});\r\n  } catch (error) {\r\n    console.error(\"Error fetching genres:\", error);\r\n    showToast(\"Failed to fetch genres. Please try again.\", \"error\");\r\n  }\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  // Simulate a page load time\r\n  setTimeout(() => {\r\n    const loader = document.getElementById(\"page-loader\");\r\n    if (loader) loader.style.display = \"none\";\r\n  }, 2000); // Adjust the timeout as needed\r\n});\r\n\r\n// Fetch popular movies from TMDB API\r\nconst fetchMovies = async (query = \"\") => {\r\n  try {\r\n    const url = query\r\n      ? `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&language=en-US`\r\n      : `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US`;\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\r\n    const data = await response.json();\r\n    return data.results;\r\n  } catch (error) {\r\n    console.error(\"Error fetching movies:\", error);\r\n    showToast(\"Failed to fetch movies. Please try again.\", \"error\");\r\n    return [];\r\n  }\r\n};\r\n\r\n// Render movies as cards\r\nconst renderMovies = (movies) => {\r\n  moviesContainer.innerHTML = \"\"; // Clear previous content\r\n  if (movies.length === 0) {\r\n    moviesContainer.innerHTML =\r\n      '<p class=\"text-center text-gray-400\">No movies found.</p>';\r\n    return;\r\n  }\r\n\r\n  const journal = JSON.parse(localStorage.getItem(\"journal\")) || [];\r\n  movies.forEach((movie) => {\r\n    const card = document.createElement(\"div\");\r\n    card.className = \"bg-gray-900 p-4 rounded-md shadow-md hover:shadow-lg\";\r\n\r\n    const img = document.createElement(\"img\");\r\n    img.src = movie.poster_path\r\n      ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\r\n      : \"https://via.placeholder.com/500x750?text=No+Image\";\r\n    img.alt = movie.title;\r\n    img.className = \"w-full h-72 object-cover rounded-md mb-4\";\r\n\r\n    const title = document.createElement(\"h2\");\r\n    title.textContent = movie.title;\r\n    title.className = \"text-xl font-bold mb-2\";\r\n\r\n    const genreList = movie.genre_ids\r\n      .map((id) => genres[id])\r\n      .filter(Boolean)\r\n      .join(\", \");\r\n    const genresText = document.createElement(\"p\");\r\n    genresText.textContent = `Genres: ${genreList || \"N/A\"}`;\r\n    genresText.className = \"text-gray-400 text-sm\";\r\n\r\n    const releaseDate = document.createElement(\"p\");\r\n    releaseDate.textContent = `Release Date: ${movie.release_date}`;\r\n    releaseDate.className = \"text-gray-400 text-sm\";\r\n\r\n    const addToJournalBtn = document.createElement(\"button\");\r\n    const isFavorite = journal.some((entry) => entry.id === movie.id);\r\n    addToJournalBtn.innerHTML = isFavorite\r\n      ? '<i class=\"fas fa-heart\"></i>'\r\n      : '<i class=\"far fa-heart\"></i>'; // Check if movie is in journal\r\n    addToJournalBtn.className =\r\n      \"bg-transparent text-[#f99339] hover:text-white text-2xl mt-4 float-right\";\r\n    addToJournalBtn.addEventListener(\"click\", () => {\r\n      toggleFavorite(movie, addToJournalBtn); // Add toggle functionality\r\n    });\r\n\r\n    card.appendChild(img);\r\n    card.appendChild(title);\r\n    card.appendChild(genresText);\r\n    card.appendChild(releaseDate);\r\n    card.appendChild(addToJournalBtn);\r\n    moviesContainer.appendChild(card);\r\n  });\r\n};\r\n\r\n// Toggle favorite function (add/remove)\r\nconst toggleFavorite = (movie, button) => {\r\n  const journal = JSON.parse(localStorage.getItem(\"journal\")) || [];\r\n  const movieExists = journal.find((entry) => entry.id === movie.id);\r\n\r\n  if (!movieExists) {\r\n    movie.tags = [];\r\n    movie.watchedDate = null;\r\n    journal.push(movie);\r\n    localStorage.setItem(\"journal\", JSON.stringify(journal));\r\n    button.innerHTML = '<i class=\"fas fa-heart\"></i>';\r\n    showToast(`${movie.title} has been added to your favorites!`, \"success\");\r\n  } else {\r\n    const updatedJournal = journal.filter((entry) => entry.id !== movie.id);\r\n    localStorage.setItem(\"journal\", JSON.stringify(updatedJournal));\r\n    button.innerHTML = '<i class=\"far fa-heart\"></i>';\r\n    showToast(`${movie.title} has been removed from your favorites.`, \"info\");\r\n  }\r\n};\r\n\r\n// Initialize homepage with popular movies\r\nconst initializeHomePage = async () => {\r\n  await fetchGenres(); // Fetch genres first\r\n  const popularMovies = await fetchMovies();\r\n  renderMovies(popularMovies);\r\n};\r\n\r\n// Search functionality\r\nconst handleSearch = async () => {\r\n  const query = searchBar.value.trim();\r\n  if (query) {\r\n    const searchedMovies = await fetchMovies(query);\r\n    renderMovies(searchedMovies);\r\n  }\r\n};\r\n\r\n// Utility function to display toast messages\r\nconst showToast = (message, type) => {\r\n  Toastify({\r\n    text: message,\r\n    duration: 3000,\r\n    gravity: \"top\",\r\n    position: \"right\",\r\n    stopOnFocus: true,\r\n    style: {\r\n      background:\r\n        type === \"success\"\r\n          ? \"#28a745\"\r\n          : type === \"error\"\r\n          ? \"#dc3545\"\r\n          : type === \"info\"\r\n          ? \"#17a2b8\"\r\n          : \"#ffc107\",\r\n      color: \"white\",\r\n      borderRadius: \"8px\",\r\n      padding: \"8px 16px\",\r\n    },\r\n  }).showToast();\r\n};\r\n\r\n// Event listener for search button\r\nsearchBtn.addEventListener(\"click\", handleSearch);\r\n\r\n// Initialize the page on load\r\ninitializeHomePage();\r\n"],"names":["$54b47fc030b7b21e$var$API_KEY","$54b47fc030b7b21e$var$BASE_URL","$54b47fc030b7b21e$var$moviesContainer","document","querySelector","$54b47fc030b7b21e$var$searchBar","$54b47fc030b7b21e$var$searchBtn","$54b47fc030b7b21e$var$genres","$54b47fc030b7b21e$var$fetchGenres","response","fetch","ok","Error","status","data","json","genres","reduce","acc","genre","id","name","error","console","$54b47fc030b7b21e$var$showToast","addEventListener","setTimeout","loader","getElementById","style","display","$54b47fc030b7b21e$var$fetchMovies","query","url","results","$54b47fc030b7b21e$var$renderMovies","movies","innerHTML","length","journal","JSON","parse","localStorage","getItem","forEach","movie","card","createElement","className","img","src","poster_path","alt","title","textContent","genreList","genre_ids","map","filter","Boolean","join","genresText","releaseDate","release_date","addToJournalBtn","isFavorite","some","entry","$54b47fc030b7b21e$var$toggleFavorite","appendChild","button","find","updatedJournal","setItem","stringify","tags","watchedDate","push","$54b47fc030b7b21e$var$initializeHomePage","$54b47fc030b7b21e$var$handleSearch","value","trim","message","type","Toastify","text","duration","gravity","position","stopOnFocus","background","color","borderRadius","padding","showToast"],"version":3,"file":"index.6db68217.js.map"}