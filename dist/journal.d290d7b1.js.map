{"mappings":"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","sources":["src/js/journal.js"],"sourcesContent":["const API_KEY = \"f227f8570d7e9f8fe4165d6e947bd24a\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\nlet genres = {};\r\n\r\n// Fetch movie genres from TMDB API\r\nconst fetchGenres = async () => {\r\n  try {\r\n    const response = await fetch(\r\n      `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`\r\n    );\r\n    if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);\r\n    const data = await response.json();\r\n    genres = data.genres.reduce((acc, genre) => {\r\n      acc[genre.id] = genre.name;\r\n      return acc;\r\n    }, {});\r\n  } catch (error) {\r\n    console.error(\"Error fetching genres:\", error);\r\n    showToast(\"Failed to fetch genres. Please try again.\", \"error\");\r\n  }\r\n};\r\n\r\nconst journalMoviesContainer = document.querySelector(\r\n  \"#journal-movies-container\"\r\n);\r\nconst tagSearchBar = document.querySelector(\"#tag-search-bar\");\r\nconst tagSearchBtn = document.querySelector(\"#tag-search-btn\");\r\n\r\n// Fetch favorite movies from local storage\r\nconst fetchJournalMovies = () => {\r\n  return JSON.parse(localStorage.getItem(\"journal\")) || [];\r\n};\r\n\r\n// Save updated journal to local storage\r\nconst saveJournalMovies = (movies) => {\r\n  localStorage.setItem(\"journal\", JSON.stringify(movies));\r\n};\r\n\r\n// Render movies in the journal\r\nconst renderJournalMovies = (movies) => {\r\n  journalMoviesContainer.innerHTML = \"\"; // Clear previous content\r\n  if (movies.length === 0) {\r\n    journalMoviesContainer.innerHTML =\r\n      '<p class=\"text-center text-gray-400\">No movies in your journal.</p>';\r\n    return;\r\n  }\r\n\r\n  movies.forEach((movie) => {\r\n    const card = document.createElement(\"div\");\r\n    card.className = \"bg-gray-900 p-4 rounded-md shadow-md hover:shadow-lg\";\r\n\r\n    const img = document.createElement(\"img\");\r\n    img.src = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\r\n    img.alt = movie.title;\r\n    img.className = \"w-full h-72 object-cover rounded-md mb-4\";\r\n\r\n    const title = document.createElement(\"h2\");\r\n    title.textContent = movie.title;\r\n    title.className = \"text-xl font-bold mb-2\";\r\n\r\n    const genreList = movie.genre_ids\r\n      .map((id) => genres[id])\r\n      .filter(Boolean)\r\n      .join(\", \");\r\n    const genresText = document.createElement(\"p\");\r\n    genresText.textContent = `Genres: ${genreList || \"N/A\"}`;\r\n    genresText.className = \"text-gray-400 text-sm\";\r\n\r\n    const releaseDate = document.createElement(\"p\");\r\n    releaseDate.textContent = `Release Date: ${movie.release_date}`;\r\n    releaseDate.className = \"text-gray-400 text-sm\";\r\n\r\n    const tags = document.createElement(\"p\");\r\n    tags.textContent = `Tags: ${movie.tags.join(\", \") || \"None\"}`;\r\n    tags.className = \"text-gray-400 text-sm\";\r\n\r\n    const watchedDate = document.createElement(\"p\");\r\n    watchedDate.textContent = `Watched: ${movie.watchedDate || \"Not set\"}`;\r\n    watchedDate.className = \"text-gray-400 text-sm\";\r\n\r\n    const tagInput = document.createElement(\"input\");\r\n    tagInput.type = \"text\";\r\n    tagInput.placeholder = \"Add tags (comma separated)\";\r\n    tagInput.className = \"w-full p-2 rounded-md bg-gray-800 text-white mb-2\";\r\n\r\n    const dateInput = document.createElement(\"input\");\r\n    dateInput.type = \"date\";\r\n    dateInput.className = \"w-full p-2 rounded-md bg-gray-800 text-white mb-2\";\r\n\r\n    const updateBtn = document.createElement(\"button\");\r\n    updateBtn.textContent = \"Update\";\r\n    updateBtn.className =\r\n      \"hover:bg-[#f99339] bg-transparent border-2 border-[#f99339] text-white px-4 py-2 rounded-md mb-2\";\r\n\r\n    updateBtn.addEventListener(\"click\", () => {\r\n      const updatedTags = tagInput.value\r\n        .split(\",\")\r\n        .map((tag) => tag.trim())\r\n        .filter((tag) => tag);\r\n      const updatedDate = dateInput.value;\r\n\r\n      const journal = fetchJournalMovies();\r\n      const updatedJournal = journal.map((m) =>\r\n        m.id === movie.id\r\n          ? {\r\n              ...m,\r\n              tags: updatedTags.length ? updatedTags : m.tags,\r\n              watchedDate: updatedDate || m.watchedDate,\r\n            }\r\n          : m\r\n      );\r\n\r\n      saveJournalMovies(updatedJournal);\r\n      renderJournalMovies(updatedJournal);\r\n    });\r\n\r\n    const removeBtn = document.createElement(\"button\");\r\n    removeBtn.innerHTML = '<i class=\"fas fa-trash\"></i>';\r\n    removeBtn.className =\r\n      \"bg-transparent text-[#f99339] hover:text-white text-2xl mt-2 float-right rounded-md\";\r\n\r\n    removeBtn.addEventListener(\"click\", () => {\r\n      const journal = fetchJournalMovies();\r\n      const updatedJournal = journal.filter((m) => m.id !== movie.id);\r\n\r\n      saveJournalMovies(updatedJournal);\r\n      renderJournalMovies(updatedJournal);\r\n    });\r\n\r\n    card.appendChild(img);\r\n    card.appendChild(title);\r\n    card.appendChild(genresText);\r\n    card.appendChild(releaseDate);\r\n    card.appendChild(tags);\r\n    card.appendChild(watchedDate);\r\n    card.appendChild(tagInput);\r\n    card.appendChild(dateInput);\r\n    card.appendChild(updateBtn);\r\n    card.appendChild(removeBtn);\r\n\r\n    journalMoviesContainer.appendChild(card);\r\n  });\r\n};\r\n\r\n// Handle tag search functionality\r\nconst handleTagSearch = () => {\r\n  const query = tagSearchBar.value.trim().toLowerCase();\r\n  if (!query) {\r\n    renderJournalMovies(fetchJournalMovies());\r\n    return;\r\n  }\r\n\r\n  const filteredMovies = fetchJournalMovies().filter((movie) =>\r\n    movie.tags.some((tag) => tag.toLowerCase().includes(query))\r\n  );\r\n\r\n  renderJournalMovies(filteredMovies);\r\n};\r\n\r\n// Initialize journal page\r\nconst initializeJournalPage = async () => {\r\n  await fetchGenres(); // Fetch genres first\r\n  renderJournalMovies(fetchJournalMovies());\r\n};\r\n\r\n// Event listener for tag search button\r\ntagSearchBtn.addEventListener(\"click\", handleTagSearch);\r\n\r\n// Initialize the page on load\r\ninitializeJournalPage();\r\n"],"names":[],"version":3,"file":"journal.d290d7b1.js.map","sourceRoot":"/__parcel_source_root/"}